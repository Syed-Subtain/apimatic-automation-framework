{
  "openapi": "3.1.0",
  "info": {
    "title": "Swagger Petstore",
    "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "version": "1.0.6"
  },
  "jsonSchemaDialect": "https://json-schema.org/draft/2020-12/schema",
  "servers": [
    {
      "url": "https://petstore.swagger.io/v2",
      "variables": {}
    },
    {
      "url": "http://petstore.swagger.io/v2",
      "variables": {}
    },
    {
      "url": "https://petstore.swagger.io/oauth",
      "variables": {}
    }
  ],
  "paths": {
    "/pet": {
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "addPet",
        "description": "Add a new pet to the store",
        "operationId": "addPet",
        "parameters": [],
        "requestBody": {
          "description": "Pet object that needs to be added to the store",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Pet"
                  },
                  {
                    "description": "Pet object that needs to be added to the store"
                  }
                ],
                "contentMediaType": "application/json"
              }
            }
          },
          "required": true
        },
        "responses": {
          "405": {
            "description": "Invalid input",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "updatePet",
        "description": "Update an existing pet",
        "operationId": "updatePet",
        "parameters": [],
        "requestBody": {
          "description": "Pet object that needs to be added to the store",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Pet"
                  },
                  {
                    "description": "Pet object that needs to be added to the store"
                  }
                ],
                "contentMediaType": "application/json"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "Pet not found",
            "headers": {},
            "content": {}
          },
          "405": {
            "description": "Validation exception",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "uploadFile",
        "description": "uploads an image",
        "operationId": "uploadFile",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to update",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "contentEncoding": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "encoding": {},
              "schema": {
                "type": "object",
                "properties": {
                  "additionalMetadata": {
                    "type": "string",
                    "description": "Additional data to pass to server"
                  },
                  "file": {
                    "type": "string",
                    "description": "file to upload",
                    "contentEncoding": "base64"
                  }
                },
                "contentMediaType": "multipart/form-data"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/pet/findByStatus": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "findPetsByStatus",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/status2"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  },
                  "description": "",
                  "contentMediaType": "application/json"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  },
                  "description": "",
                  "xml": {
                    "attribute": false,
                    "wrapped": false
                  },
                  "contentMediaType": "application/xml"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/pet/{petId}": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "getPetById",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "contentEncoding": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/xml": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pet"
                    },
                    {
                      "xml": {
                        "name": "Pet",
                        "attribute": false,
                        "wrapped": false
                      }
                    }
                  ],
                  "contentMediaType": "application/xml"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "Pet not found",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "updatePetWithForm",
        "description": "Updates a pet in the store with form data",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "contentEncoding": "int64"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "style": "simple",
            "schema": {
              "const": "application/x-www-form-urlencoded",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "encoding": {},
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Updated name of the pet"
                  },
                  "status": {
                    "type": "string",
                    "description": "Updated status of the pet"
                  }
                },
                "contentMediaType": "application/x-www-form-urlencoded"
              }
            }
          },
          "required": false
        },
        "responses": {
          "405": {
            "description": "Invalid input",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "pet"
        ],
        "summary": "deletePet",
        "description": "Deletes a pet",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "contentEncoding": "int64"
            }
          },
          {
            "name": "api_key",
            "in": "header",
            "description": "",
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "Pet not found",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/pet/findByTags": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "findPetsByTags",
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  },
                  "description": "",
                  "contentMediaType": "application/json"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  },
                  "description": "",
                  "xml": {
                    "attribute": false,
                    "wrapped": false
                  },
                  "contentMediaType": "application/xml"
                }
              }
            }
          },
          "400": {
            "description": "Invalid tag value",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": true,
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/store/order/{orderId}": {
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "deleteOrder",
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "style": "simple",
            "schema": {
              "minimum": 1.0,
              "type": "integer",
              "contentEncoding": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "Order not found",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "store"
        ],
        "summary": "getOrderById",
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "style": "simple",
            "schema": {
              "maximum": 10.0,
              "minimum": 1.0,
              "type": "integer",
              "contentEncoding": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Order"
                    },
                    {
                      "xml": {
                        "name": "Order",
                        "attribute": false,
                        "wrapped": false
                      }
                    }
                  ],
                  "contentMediaType": "application/xml"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "Order not found",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/store/inventory": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "getInventory",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "contentMediaType": "application/json"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "parameters": []
    },
    "/store/order": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "placeOrder",
        "description": "Place an order for a pet",
        "operationId": "placeOrder",
        "parameters": [],
        "requestBody": {
          "description": "order placed for purchasing the pet",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Order"
                  },
                  {
                    "description": "order placed for purchasing the pet"
                  }
                ],
                "contentMediaType": "application/json"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Order"
                    },
                    {
                      "xml": {
                        "name": "Order",
                        "attribute": false,
                        "wrapped": false
                      }
                    }
                  ],
                  "contentMediaType": "application/xml"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Order",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/user/{username}": {
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "deleteUser",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "User not found",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false
      },
      "get": {
        "tags": [
          "user"
        ],
        "summary": "getUserByName",
        "description": "Get user by user name",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/User"
                    },
                    {
                      "xml": {
                        "name": "User",
                        "attribute": false,
                        "wrapped": false
                      }
                    }
                  ],
                  "contentMediaType": "application/xml"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "User not found",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "updateUser",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated user object",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User"
                  },
                  {
                    "description": "Updated user object"
                  }
                ],
                "contentMediaType": "application/json"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid user supplied",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "User not found",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "loginUser",
        "description": "Logs user into the system",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "date in UTC when token expires",
                      "contentMediaType": "text/plain"
                    }
                  }
                }
              },
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "calls per hour allowed by the user",
                      "contentMediaType": "text/plain"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "contentMediaType": "application/json"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                  "xml": {
                    "name": "response",
                    "attribute": false,
                    "wrapped": false
                  },
                  "contentMediaType": "application/xml"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "createUser",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "parameters": [],
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/User"
                  },
                  {
                    "description": "Created user object"
                  }
                ],
                "contentMediaType": "application/json"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/user/createWithArray": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "createUsersWithArrayInput",
        "description": "Creates list of users with given input array",
        "operationId": "createUsersWithArrayInput",
        "parameters": [],
        "requestBody": {
          "description": "List of user object",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                },
                "description": "List of user object",
                "contentMediaType": "application/json"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/user/createWithList": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "createUsersWithListInput",
        "description": "Creates list of users with given input array",
        "operationId": "createUsersWithListInput",
        "parameters": [],
        "requestBody": {
          "description": "List of user object",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                },
                "description": "List of user object",
                "contentMediaType": "application/json"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "logoutUser",
        "description": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false
      },
      "parameters": []
    }
  },
  "components": {
    "schemas": {
      "ApiResponse": {
        "title": "ApiResponse",
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "contentEncoding": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "User": {
        "title": "User",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "contentEncoding": "int64"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "userStatus": {
            "type": "integer",
            "description": "User Status",
            "contentEncoding": "int32"
          }
        },
        "xml": {
          "name": "User",
          "attribute": false,
          "wrapped": false
        }
      },
      "status2": {
        "title": "status2",
        "enum": [
          "available",
          "pending",
          "sold"
        ],
        "type": "string"
      },
      "Order": {
        "title": "Order",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "contentEncoding": "int64"
          },
          "petId": {
            "type": "integer",
            "contentEncoding": "int64"
          },
          "quantity": {
            "type": "integer",
            "contentEncoding": "int32"
          },
          "shipDate": {
            "type": "string",
            "contentEncoding": "date-time"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status1"
              },
              {
                "description": "Order Status"
              }
            ]
          },
          "complete": {
            "type": "boolean"
          }
        },
        "xml": {
          "name": "Order",
          "attribute": false,
          "wrapped": false
        }
      },
      "Category": {
        "title": "Category",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "contentEncoding": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Category",
          "attribute": false,
          "wrapped": false
        }
      },
      "Pet": {
        "title": "Pet",
        "required": [
          "name",
          "photoUrls"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "contentEncoding": "int64"
          },
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Category"
              },
              {
                "xml": {
                  "name": "Category",
                  "attribute": false,
                  "wrapped": false
                }
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "photoUrls": {
            "type": "array",
            "items": {
              "type": "string",
              "xml": {
                "name": "photoUrl",
                "attribute": false,
                "wrapped": false
              }
            },
            "description": "",
            "xml": {
              "attribute": false,
              "wrapped": true
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "description": "",
            "xml": {
              "attribute": false,
              "wrapped": true
            }
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              },
              {
                "description": "pet status in the store"
              }
            ]
          }
        },
        "xml": {
          "name": "Pet",
          "attribute": false,
          "wrapped": false
        }
      },
      "Tag": {
        "title": "Tag",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "contentEncoding": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Tag",
          "attribute": false,
          "wrapped": false
        }
      },
      "Status": {
        "title": "Status",
        "enum": [
          "available",
          "pending",
          "sold"
        ],
        "type": "string",
        "description": "pet status in the store"
      },
      "Status1": {
        "title": "Status1",
        "enum": [
          "placed",
          "approved",
          "delivered"
        ],
        "type": "string",
        "description": "Order Status"
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      },
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore.swagger.io/oauth/authorize",
            "scopes": {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account"
            }
          }
        }
      }
    }
  },
  "security": [],
  "tags": [
    {
      "name": "pet",
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "store",
      "description": "Access to Petstore orders"
    },
    {
      "name": "user",
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    }
  ],
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}